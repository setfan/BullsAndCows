type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BullsCowsTest extends StageTest<String> {

        // base test with 1 digit number
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output;
            int gotAnswer = 0;
            output = main.execute("1");

            for (int i = 0; i <= 9; i++) {
                if (main.isFinished()) {
                    break; // if game has stopped, stop cycle and start check of results;
                }
                output = main.execute(Integer.toString(i));
                int[] result = getNumOfBullsAndCows(output);
                if (result[0] == 1) {
                    gotAnswer++; // if got a bull, count for an amount of answers
                }
            }

            // if we got less or more than 1 answer, the program work is incorrect
            if (gotAnswer != 1) {
                return CheckResult.wrong("The game has no answer or more than one. ");
            }

            return CheckResult.correct();
        }

        // standard bulls and cows game
        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4");

            Integer[] usedNums = getUsedNumbers(main, 4);
            boolean check = getPermutations(main, 4, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // max length we can check
        @DynamicTestingMethod
        CheckResult test3() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6");

            Integer[] usedNums = getUsedNumbers(main, 6);
            boolean check = getPermutations(main, 6, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // length limit check
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11");

            if (output.toLowerCase().contains("error")) {
                return CheckResult.correct();
            } else {
                return CheckResult.wrong("An error message expected with input \"11\"");
            }
        }

        Integer[] getUsedNumbers(TestedProgram main, int length) {
            Integer[] nums = new Integer[length];
            int[] result;

            int index = 0;
            String output;
            String input;

            for (int i = 0; i < 10; i++) {
                input = new String(new char[length]).replace("\0", Integer.toString(i));
                output = main.execute(input);
                result = getNumOfBullsAndCows(output);

                if (result[0] > 1) {
                    throw new WrongAnswer("Seems like " +
                            "the calculation of bulls isn't right. " +
                            "For the guess \"" + input + "\" there can be 1 bull at max.");
                }

                if (result[0] == 1) {
                    nums[index++] = i;
                }
                if (index == length) {
                    break;
                }
            }

            if (index != length) {
                throw new WrongAnswer(
                        "Output should contain " + length + " bulls " +
                        "summarized as every option was tried. Found: " + index
                );
            }

            return nums;
        }


        // permutations one by one
        public boolean getPermutations(TestedProgram main, int length, Integer[] elements) {
            int[] indexes = new int[length];
            for (int i = 0; i < length; i++) {
                indexes[i] = 0;
            }

            String output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
            int[] result = getNumOfBullsAndCows(output);
            if (result[0] == length) {
                return true;
            }

            int i = 0;
            while (i < length) {
                if (indexes[i] < i) {
                    swap(elements, i % 2 == 0 ? 0 : indexes[i], i);
                    output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
                    result = getNumOfBullsAndCows(output);
                    if (result[0] == length) {
                        return true;
                    }
                    indexes[i]++;
                    i = 0;
                } else {
                    indexes[i] = 0;
                    i++;
                }
            }
            return false;
        }

        private static void swap(Integer[] input, int a, int b) {
            int tmp = input[a];
            input[a] = input[b];
            input[b] = tmp;
        }


        // get number of bulls and cows from user program's output
        int[] getNumOfBullsAndCows(String userString) {
            Matcher nonePattern = Pattern.compile("\\b[nN]one\\b").matcher(userString);
            Matcher cowsPattern = Pattern.compile("\\b\\d [cC]ow").matcher(userString);
            Matcher bullsPattern = Pattern.compile("\\b\\d [bB]ull").matcher(userString);
            Pattern oneNumPattern = Pattern.compile("\\d");

            if (nonePattern.find()) {
                return new int[]{0, 0};
            }

            int[] ans = {0, 0};
            boolean found = false;

            if (bullsPattern.find()) {
                String temp = bullsPattern.group();
                Matcher oneNumBulls = oneNumPattern.matcher(temp);
                oneNumBulls.find();
                ans[0] = Integer.parseInt(oneNumBulls.group());
                found = true;
            }

            if (cowsPattern.find()) {
                String temp = cowsPattern.group();
                Matcher oneNumCows = oneNumPattern.matcher(temp);
                oneNumCows.find();
                ans[1] = Integer.parseInt(oneNumCows.group());
                found = true;
            }

            if (!found) {
                throw new WrongAnswer(
                        "Cannot find number of bulls or number of cows or None after the input."
                );
            }

            return ans;
        }
    }
  learner_created: false
- name: src/bullscows/Grinder.java
  visible: true
  text: |
    package bullscows;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class Grinder {

        String secretCode;
        int bulls;
        int cows;
        int[] bullsCows = {0, 0};
        List<Integer> bullsDiscovered = new ArrayList<>();
        List<Integer> cowsDiscovered = new ArrayList<>();


        public int getBulls() {
            return bulls;
        }

        public int getCows() {
            return cows;
        }

        public Grinder(String secretCode) {
            this.secretCode = secretCode;
        }

        private int[] secretCodeToArray(String code) {
            return Arrays.stream(code.split("")).mapToInt(Integer::parseInt).toArray();
        }

        int[] grind(String inputCode) {
            int[] input = Arrays.stream(inputCode.split("")).mapToInt(Integer::parseInt).toArray();


            for (int i = 0; i < input.length; i++) {

                int currentNum = secretCodeToArray(this.secretCode)[i];

                for (int j = 0; j < input.length; j++) {
                    if (currentNum == input[j] && i == j) {
                        bulls++;
                        bullsDiscovered.add(currentNum);
                    } else if (currentNum == input[j] && !isBull(currentNum)) {
                        if(!isCow(currentNum)){
                            cows++;
                            cowsDiscovered.add(currentNum);
                        }
                    }
                }
            }
            bullsCows[0] = getBulls();
            bullsCows[1] = getCows();

            zeroTheGrinder();

            return bullsCows;
        }

        private void zeroTheGrinder(){
            this.bulls = 0;
            this.cows = 0;
            bullsDiscovered.clear();
            cowsDiscovered.clear();
        }

        private boolean isBull(int num){
            return bullsDiscovered.contains(num);
        }

        private boolean isCow(int num){
            return cowsDiscovered.contains(num);
        }
    }
  learner_created: true
- name: src/bullscows/InputManager.java
  visible: true
  text: |
    package bullscows;

    import java.util.Scanner;

    public class InputManager {
        private static Scanner scanner;


        protected static int readCodeLength() {
            System.out.println("Please, enter the secret code's length:");
            scanner = new Scanner(System.in);
            int codeLength = scanner.nextInt();

            if (codeLength > 10) {
                System.out.println("Error: can't generate a secret number with a " +
                        "length of 11 because there aren't enough unique digits.");
            } else {

                return codeLength;
            }
            scanner.close();
            return 0;
        }

        protected static String readCode() {
            scanner = new Scanner(System.in);
            return scanner.nextLine();
        }
    }
  learner_created: true
- name: src/bullscows/GameManger.java
  visible: true
  text: |
    package bullscows;

    public class GameManger {
        private int numberOfTurns = 1;
        Grinder grinder;
        OutputManager outputManager = new OutputManager();
        int[] bullsAndCows;
        int codeLength;

        public GameManger() {
            grinder = new Grinder(generateCode());
        }

        protected void startGame() {
            outputManager.printMessage("Okay, let's start a game!");
            nextTurn();
        }

        protected void nextTurn() {
            outputManager.printMessage("Turn " + this.numberOfTurns + ":");
            increaseNumberOfTurns();
            gameLoop(InputManager.readCode());
        }

        private void increaseNumberOfTurns() {
            this.numberOfTurns++;
        }

        private String generateCode() {
            codeLength = InputManager.readCodeLength();
            return CodeGenerator
                    .generateCode(codeLength);
        }

        private void gameLoop(String nextCode) {
            bullsAndCows = this.grinder.grind(nextCode);

            outputManager.createOutput(bullsAndCows[0], bullsAndCows[1]);

            if (bullsAndCows[0] == codeLength) {
                outputManager.printFinalMessage();
            } else {
                nextTurn();
            }
        }
    }
  learner_created: true
- name: src/bullscows/CodeGenerator.java
  visible: true
  text: |
    package bullscows;

    import java.util.Arrays;
    import java.util.stream.Collectors;

    public class CodeGenerator {

        public static String generateCode(int length) {

            String number = "";

            while (number.length() < 10) {
                number = Arrays.stream(randomGenerator().split(""))
                        .distinct()
                        .collect(Collectors.joining());
            }

            return number.substring(0, length);
        }


        private static String randomGenerator() {
            long pseudoRandomNumber = System.nanoTime();

            return String.valueOf(pseudoRandomNumber);
        }
    }
  learner_created: true
- name: src/bullscows/OutputManager.java
  visible: true
  text: |-
    package bullscows;

    public class OutputManager {
        private final int winningScore = 4;

        String bullName = "bull";
        String cowName = "cow";


        void createOutput(int bulls, int cows) {

            if (bulls > 1) {
                this.bullName = "bulls";
            }
            if (cows > 1) {
                this.cowName = "cows";
            }
            String output = "Grade: ";
            if (bulls == 0 && cows > 0) {
                output = output + cows + " " + cowName;
            } else if (bulls > 0 && cows == 0) {
                output = output + bulls + " " + bullName;
            } else if (bulls == 0 && cows == 0) {
                output = output + " None.";
            } else {
                output = output + bulls + " " + bullName + " and " + cows + " " + cowName;
            }


            printMessage(output);
        }

        protected void printFinalMessage(){

            printMessage("Congratulations! You guessed the secret code.");
        }

        protected void printMessage(String message){
            System.out.println(message);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5433#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 16 Jun 2022 21:29:38 UTC
record: 5
